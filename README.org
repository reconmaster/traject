#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:nil title:t toc:nil todo:t |:t
#+TITLE: traject: generate Developer Mode 2.0 trajectories
#+DATE:
#+AUTHOR: Andrew M. Davis
#+EMAIL: amdavis@uchicago.edu
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

* Overview
  :PROPERTIES:
  :ID:       c0e0603e-7d7d-4b09-8c21-3621789af4a7
  :END:
General python interface for managing trajectories and the interface
with TrueBeam's Developer Mode. Control points as used with developer
mode are implemented here with python interface. The xml schema used
to build the xml data structure that is used for writing the new xml
control scripts.

Mechanical control points can be generated with python scripting. The
trajectory object can then be written to the Developer Mode schema
using this library.
* Installation
  :PROPERTIES:
  :ID:       eaccc350-7cc4-44ca-8974-55cf0e146246
  :END:
** Dependencies
   :PROPERTIES:
   :ID:       e0162040-8f2b-4e2a-90eb-a9ae6e6fcc89
   :END:
#+BEGIN_SRC sh
pip install lxml matplotlib sympy
#+END_SRC
*** [[https://pythonhosted.org/generateDS/][generateDS]]
    :PROPERTIES:
    :ID:       b98d38c7-f2ed-4f43-9338-084112d96aba
    :END:
This package is used to update the developer mode python class from
the xml schema.
*** [[http://lxml.de/][lxml]]
    :PROPERTIES:
    :ID:       06b1900a-21e8-4f57-83a9-3f86d7cd4c9e
    :END:
Library for using xml files in python
*** [[http://matplotlib.org/][matplotlib]]
    :PROPERTIES:
    :ID:       9f27f93c-4c34-4a7f-bac0-ad3d2b0eaa50
    :END:
Used for visualization
*** [[http://www.numpy.org/][numpy]]
    :PROPERTIES:
    :ID:       a076b858-f81f-412e-87e9-edec0026e328
    :END:
The heavy lifting.
*** [[http://www.sympy.org/en/index.html][sympy]]
    :PROPERTIES:
    :ID:       76e7c495-9d2e-459e-8bdc-da76508b5400
    :END:
Symbolic math package
** Virtual Environment
   :PROPERTIES:
   :ID:       0a2d9ed1-7b8d-4b22-be7b-ca41f0f5bfcd
   :END:
I develop/run this in a virtual environment. If not using, just make
sure you have numpy and matplotlib available to your environment.

#+BEGIN_SRC sh
mkvirtualenv -p /usr/bin/python2 traject && pip install -U pip

pip install matplotlib
pip install git+https://github.com/PySide/pyside-setup.git
#+END_SRC
* [[file:examples][Examples]]
  :PROPERTIES:
  :ID:       fbd76d00-1be7-4a52-a53a-f90fe80dd69e
  :END:
As the user interface is rather sparse, a few examples of how to use
the trajectory class are included

- [[file:examples/virtiso.py][virtual isocenter]]

* Change Schema Version
  :PROPERTIES:
  :ID:       3dd7aaaf-8ca6-49af-9b34-aebb0d148d38
  :END:
When building the Developer Mode class from a new scheam, the class
can be (re-)generated using the following in the traject/traject
folder:

#+BEGIN_SRC sh :dir traject :output raw
ln -sf ResearchBeam_HE20.xsd schema/ResearchBeam.xsd
generateDS.py --export="write" -o "developer_mode.py" -s "developer_modes_subs.py" schema/VarianResearchBeam.xsd
#+END_SRC
** TODO packaging
   :PROPERTIES:
   :ID:       2934AD27-2AB9-486C-8D3B-59B5B0DADDB4
   :END:
I need to modify the setup so that the correct class is generated for
the schema of interest. As I needed to modify the generated class by
hand to fix some of the documentation, it may be better to have
different classes generated for different versions and then select
based on the version number.

- [[https://pythonhosted.org/generateDS/#packaging-your-code][generateDS packaging your code]]

After having to manually modify the class calls in the code after
generating from the new schema, it may not be pragmatic to have this
be generated on the fly. Probably better to have the schema class be
generated and tested within the version control framework as it is
now. A separate class could be used depending on the users preferred
version number.
